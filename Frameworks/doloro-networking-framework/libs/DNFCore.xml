<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DNFCore</name>
    </assembly>
    <members>
        <member name="T:BaseQueries.GET_GUEST_TOKEN">
            <summary>
            Registrate token with guest rights in the system and return to client.
            </summary>
        </member>
        <member name="F:BaseQueries.GET_GUEST_TOKEN.guestTokenHandler">
            <summary>
            Handler that would be userd to generating and authorizing of guest tokens.
            Return generated token in string format.
            </summary>
        </member>
        <member name="T:BaseQueries.GET_GUEST_TOKEN.GuestTokenHandler">
            <summary>
            Delegate that allows to return guest token in string format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseQueries.GET_GUEST_TOKEN.Description(System.String)">
            <summary>
            Return the description relative to the lenguage code or default if not found.
            </summary>
            <param name="cultureKey">Key of target culture.</param>
            <returns>Description for relative culture.</returns>
        </member>
        <member name="M:BaseQueries.GET_GUEST_TOKEN.Execute(UniformQueries.QueryPart[])">
            <summary>
            Methods that process query.
            </summary>
            <param name="queryParts">Recived query parts.</param>
        </member>
        <member name="M:BaseQueries.GET_GUEST_TOKEN.IsTarget(UniformQueries.QueryPart[])">
            <summary>
            Check by the entry params does it target Query Handler.
            </summary>
            <param name="queryParts">Recived query parts.</param>
            <returns>Result of comparation.</returns>
        </member>
        <member name="T:BaseQueries.GET_GUEST_TOKEN.GuestTokenProcessor">
            <summary>
            Handler that provide standartized way to recive guest token.
            </summary>
        </member>
        <member name="M:BaseQueries.GET_GUEST_TOKEN.GuestTokenProcessor.TryToReciveTokenAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Trying to recive guest token in async task.
            </summary>
            <param name="serverIP">Target server's IP.</param>
            <param name="pipeName">Name of the pipe that broadcasting guest tokens.</param>
            <param name="cancellationToken">Token that would terminate async operation.</param>
        </member>
        <member name="T:BaseQueries.GET_PUBLIC_KEY">
            <summary>
            Query that request from server public encription key (RSA algorithm).
            </summary>
        </member>
        <member name="M:BaseQueries.GET_PUBLIC_KEY.Description(System.String)">
            <summary>
            Return the description relative to the lenguage code or default if not found.
            </summary>
            <param name="cultureKey">Key of target culture.</param>
            <returns>Description for relative culture.</returns>
        </member>
        <member name="M:BaseQueries.GET_PUBLIC_KEY.Execute(UniformQueries.QueryPart[])">
            <summary>
            Methods that process query.
            </summary>
            <param name="queryParts">Recived query parts.</param>
        </member>
        <member name="M:BaseQueries.GET_PUBLIC_KEY.IsTarget(UniformQueries.QueryPart[])">
            <summary>
            Check by the entry params does it target Query Handler.
            </summary>
            <param name="queryParts">Recived query parts.</param>
            <returns>Result of comparation.</returns>
        </member>
        <member name="T:UniformClient.BaseClient">
            <summary>
            Class that provide base client features and envirounment static API.
            </summary>
            <summary>
            Part off class that provide controll under the process.
            </summary>
            <summary>
            Part of class that provide core methods and fields.
            </summary>
            <summary>
            Par of classs that profide transmisssion handlers.
            </summary>
            <summary>
            Part of class that provide methods that simplify using of client.
            </summary>
            <summary>
            Part off class that provide API to work by routing tables.
            </summary>
            <summary>
            Part of class that provide API to oppening Client-Server transmisssion lines.
            </summary>
        </member>
        <member name="F:UniformClient.BaseClient.threadSleepTime">
            <summary>
            How many milisseconds will sleep thread after tick.
            </summary>
        </member>
        <member name="P:UniformClient.BaseClient.AppTerminated">
            <summary>
            If true then will stop main loop.
            </summary>
        </member>
        <member name="F:UniformClient.BaseClient._AppTerminated">
            <summary>
            Pufer that contains state of app.
            </summary>
        </member>
        <member name="P:UniformClient.BaseClient.TerminationTokenSource">
            <summary>
            Object that can be used to mange global treads.
            </summary>
        </member>
        <member name="F:UniformClient.BaseClient._TerminationToken">
            <summary>
            Buferr that contains token controller.
            </summary>
        </member>
        <member name="F:UniformClient.BaseClient.thread">
            <summary>
            Reference to thread that host this server.
            </summary>
        </member>
        <member name="M:UniformClient.BaseClient.LoadAssemblies(System.String)">
            <summary>
            Loading assemblies from requested path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:UniformClient.BaseClient.ArgsReactor(System.String[])">
            <summary>
            Method that will configurate application and server relative to the uniform arguments.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:UniformClient.BaseClient.StartClientThread(System.String,System.Object,System.Threading.ParameterizedThreadStart)">
            <summary>
            Method that starting client thread.
            </summary>
            <param name="threadName"></param>
            <param name="sharebleParam"></param>
            <param name="clientLoop"></param>
            <returns></returns>
        </member>
        <member name="F:UniformClient.BaseClient.SW_HIDE">
            <summary>
            Argument that will hide console window.
            </summary>
        </member>
        <member name="F:UniformClient.BaseClient.SW_SHOW">
            <summary>
            Agrument that will show console window.
            </summary>
        </member>
        <member name="M:UniformClient.BaseClient.StartPPClientThreadAsync(UniformClient.BaseClient,System.String,PipesProvider.Client.TransmissionLine)">
            <summary>
            Allow to start thread but previous return turn to current thread.
            Allow to use single line queries.
            </summary>
            <param name="client"></param>
            <param name="guid"></param>
            <param name="trnsLine"></param>
        </member>
        <member name="M:UniformClient.BaseClient.GetValidPublicKeyViaPPAsync(PipesProvider.Networking.Routing.Instruction)">
            <summary>
            Provide valid public key for target server encryption.
            Auto update key if was expired.
            </summary>
            <param name="instruction"></param>
            <returns></returns>
        </member>
        <member name="M:UniformClient.BaseClient.HandlerInputTransmissionAsync(System.Object)">
            <summary>
            Handler that will recive message from the server.
            </summary>
            <param name="sharedObject">
            Normaly is a TransmissionLine that contain information about actual transmission.</param>
        </member>
        <member name="M:UniformClient.BaseClient.HandlerOutputTransmisssionAsync(System.Object)">
            <summary>
            Handler that send last dequeued query to server when connection will be established.
            </summary>
            <param name="sharedObject">Normaly is a TransmissionLine that contain information about actual transmission.</param>
        </member>
        <member name="F:UniformClient.BaseClient.DuplexBackwardCallbacks">
            <summary>
            Table that contain delegatds subscribed to beckward lines in duplex queries.
            
            Key string - backward domain
            Value void(PipesProvider.Client.TransmissionLine, object) // answer processing delegat.
            </summary>
        </member>
        <member name="M:UniformClient.BaseClient.OpenOutTransmissionLineViaPP(System.String,System.String)">
            <summary>
            Oppening transmition line that will able to send querie to described server's pipe.
            </summary>
            <param name="serverName"></param>
            <param name="pipeName"></param>
            <returns></returns>
        </member>
        <member name="M:UniformClient.BaseClient.ReceiveDelayedAnswerViaPP(PipesProvider.Client.TransmissionLine,System.String,System.Action{PipesProvider.Client.TransmissionLine,System.Object})">
            <summary>
            Open a line that will be ready to recive server answer.
            New line will created related to params of requesting line and sended query.
            
            Attention: Not work with broadcasting server.
            </summary>
            <param name="line">Line that was used to transmition</param>
            <param name="answerHandler">Delegate that will be called as handler for answer processing. 
            TransmissionLine contain data about actual transmission.
            object contain recived query (usualy string or byte[]).</param>
            <param name="decodedQuery">Query that sent to server and must recive answer. Must be not encoded.</param>
            <returns></returns>
        </member>
        <member name="M:UniformClient.BaseClient.ReceiveDelayedAnswerViaPP(PipesProvider.Client.TransmissionLine,UniformQueries.QueryPart[],System.Action{PipesProvider.Client.TransmissionLine,System.Object})">
            <summary>
            Open a line that will be ready to recive server answer.
            New line will created related to params of requesting line and sended query.
            
            Attention: Not work with broadcasting server.
            </summary>
            <param name="line">Line that was used to transmition</param>
            <param name="answerHandler">Delegate that will be called as handler for answer processing. 
            TransmissionLine contain data about actual transmission.
            object contain recived query (usualy string or byte[]).</param>
            <param name="entryQueryParts">Parts of query that was recived from client. 
            Method will detect core part and establish backward connection.</param>
            <returns></returns>
        </member>
        <member name="M:UniformClient.BaseClient.ReceiveAnonymousBroadcastMessage(System.String,System.String,System.Action{PipesProvider.Client.TransmissionLine,System.Object})">
            <summary>
            Recive message from broadcasting server.
            ATTENTION: Eould connect to server as guest user.
            </summary>
            <param name="serverName">Srver name or ip.</param>
            <param name="pipeName">Name of pipe started on server.</param>
            <param name="answerHandler">Delegate that would to call when message received.</param>
            <returns>Created line.</returns>
        </member>
        <member name="M:UniformClient.BaseClient.EnqueueDuplexQueryViaPP(PipesProvider.Client.TransmissionLine,System.String,System.Action{PipesProvider.Client.TransmissionLine,System.Object})">
            <summary>
            Add query to queue. 
            Open backward line that will call answer handler.
            </summary>
            <param name="line">Line proccessor that control queries posting to target server.</param>
            <param name="query">Query that will sent to server.</param>
            <param name="answerHandler">Callback that will recive answer.</param>
        </member>
        <member name="M:UniformClient.BaseClient.EnqueueDuplexQueryViaPP(System.String,System.String,System.String,System.Action{PipesProvider.Client.TransmissionLine,System.Object})">
            <summary>
            Add query to queue. 
            Open backward line that will call answer handler.
            </summary>
            <param name="serverName">Name of the server. "." if local.</param>
            <param name="serverPipeName">Name of pipe provided by server.</param>
            <param name="query">Query that will sent to server.</param>
            <param name="answerHandler">Callback that will recive answer.</param>
            <returns>Established transmission line.</returns>
        </member>
        <member name="F:UniformClient.BaseClient.routingTable">
            <summary>
            Table that contain instruction that allow to determine the server which is a target for recived query.
            </summary>
        </member>
        <member name="M:UniformClient.BaseClient.LoadRoutingTables(System.String[])">
            <summary>
            Update routing table by the files that will found be requested directory.
            Also auto loking for core routing  table by "resources\routing\".
            
            In case if tables not found then create new one to provide example.
            </summary>
            <param name="directories"></param>
        </member>
        <member name="M:UniformClient.BaseClient.OpenTransmissionLineViaPP(System.String,System.String,System.Action{PipesProvider.Client.TransmissionLine})">
            <summary>
            Automaticly create Transmission line or lokking for previos one.
            </summary>
            <param name="serverName"></param>
            <param name="pipeName"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:UniformClient.BaseClient.OpenTransmissionLineViaPP(UniformClient.BaseClient,System.String,System.String,Microsoft.Win32.SafeHandles.SafeAccessTokenHandle@,System.Action{PipesProvider.Client.TransmissionLine})">
            <summary>
            Provide complex initalization of all relative systems. 
            Build meta data, regitrate line in common table.
            Start new thread to avoid freezes.
            </summary>
            <param name="client"></param>
            <param name="token">Token that will be used for logon. on remote machine LSA. 
            Sharing by ref to allow update in internal lines.</param>
            <param name="serverName">Name of IP adress of remote or local server.</param>
            <param name="pipeName">Name of the pipe started on the server.</param>
            <param name="callback">Method that will be called when connection will be established.</param>
            <returns>Opened transmission line. Use line.Enqueue to add your query.</returns>
        </member>
        <member name="T:UniformClient.NativeMethods">
            <summary>
            Methods binded from external libraries.
            </summary>
        </member>
        <member name="M:UniformClient.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Imported method that allo to controll console window state.
            </summary>
            <param name="hWnd"></param>
            <param name="nCmdShow"></param>
            <returns></returns>
        </member>
        <member name="M:UniformClient.NativeMethods.GetConsoleWindow">
            <summary>
            Inported method that allow acces to console window.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UniformClient.Standard.SimpleClient">
            <summary>
            Client that allow instiniate BaseClient.
            Not contain any additive methods.
            
            Case of using - simple transmition line that not require complex responce.
            </summary>
        </member>
        <member name="T:PipesProvider.Networking.Routing.PartialAuthorizedInstruction">
            <summary>
            Provide data and API required for connections that require partical authorization rights on server.
            </summary>
        </member>
        <member name="F:PipesProvider.Networking.Routing.PartialAuthorizedInstruction.guestChanel">
            <summary>
            Name of the broadcasting pipe that providing guest tokens.
            </summary>
        </member>
        <member name="P:PipesProvider.Networking.Routing.PartialAuthorizedInstruction.GuestToken">
            <summary>
            Return token authorized on target server as guest.
            </summary>
        </member>
        <member name="M:PipesProvider.Networking.Routing.PartialAuthorizedInstruction.TryToGetGuestTokenAsync(System.Action{PipesProvider.Networking.Routing.PartialAuthorizedInstruction},System.Threading.CancellationToken)">
            <summary>
            Tring to recive partial authorized token from target server.
            </summary>
            <param name="callback">Delegate that will be called when guest token reciving operation would be finished.</param>
            <param name="cancellationToken">Using this token you can terminate task.</param>
        </member>
        <member name="M:PipesProvider.Networking.Routing.PartialAuthorizedInstruction.TryToGetGuestToken(System.Threading.CancellationToken)">
            <summary>
            Tring to recive partial authorized token from target server.
            </summary>
            <param name="cancellationToken">Token that can be used to termination of the logon process.</param>
            <returns></returns>
        </member>
        <member name="P:PipesProvider.Networking.Routing.PartialAuthorizedInstruction.GuestTokenHandler">
            <summary>
            Handler that take full control on reciving of guest token.
            </summary>
        </member>
        <member name="F:PipesProvider.Networking.Routing.PartialAuthorizedInstruction._GuestTokenHandler">
            <summary>
            Handler that take full control on reciving of guest token.
            </summary>
        </member>
        <member name="T:PipesProvider.Networking.Routing.RelayInstruction">
            <summary>
            Instruction that allow retranslate broadcasting via servers chain.
            </summary>
        </member>
        <member name="T:PipesProvider.Networking.Routing.RelayInstruction.RelayBehavior">
            <summary>
            Define relay behavior.
            </summary>
        </member>
        <member name="F:PipesProvider.Networking.Routing.RelayInstruction.RelayBehavior.Duplex">
            <summary>
            Target is allow duplex transmission.
            </summary>
        </member>
        <member name="F:PipesProvider.Networking.Routing.RelayInstruction.RelayBehavior.Broadcasting">
            <summary>
            Target is broadcasting server.
            </summary>
        </member>
        <member name="F:PipesProvider.Networking.Routing.RelayInstruction.entryPipeName">
            <summary>
            Name of pipe started on server that would relay broadcasting from target server.
            Target server must be broadcasting one.
            
            Shame:
            client -> relay-server-ip.entryPipeName -> routingIp.pipeName
            </summary>
        </member>
        <member name="F:PipesProvider.Networking.Routing.RelayInstruction.behavior">
            <summary>
            Define behavior of relay server.
            </summary>
        </member>
        <member name="M:PipesProvider.Networking.Routing.RelayInstruction.TryToDetectTarget(System.Collections.Generic.IEnumerable{PipesProvider.Networking.Routing.Instruction},System.String,PipesProvider.Networking.Routing.RelayInstruction@)">
            <summary>
            Trying to find suitable instruction for transmisting pipe.
            </summary>
            <param name="collection">Collection of routing instructions that could contains target RelayInstruction.</param>
            <param name="entryPipeName">Name of relay pipe that recive broadcasting relay request.</param>
            <param name="relayInstruction">A found instruction. Null if not found.</param>
            <returns>Resut of search.</returns>
        </member>
        <member name="M:PipesProvider.Networking.Routing.RelayInstruction.DetectTarget(System.Collections.Generic.IEnumerable{PipesProvider.Networking.Routing.Instruction},System.String)">
            <summary>
            Looking for suitable instruction for transmisting pipe.
            In case if not found returning null.
            </summary>
            <param name="collection">Collection of routing instructions that could contains target RelayInstruction.</param>
            <param name="entryPipeName">Name of relay pipe that recive broadcasting relay request.</param>
            <returns>>A found instruction. Null if not found.</returns>
        </member>
        <member name="T:UniformServer.Commands">
            <summary>
            Provide API to work with server related commands.
            </summary>
        </member>
        <member name="M:UniformServer.Commands.BaseCommands(System.String)">
            <summary>
            React to the base commands that can be applied to every server.
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:UniformServer.NativeMethods">
            <summary>
            Methods binded from external libraries.
            </summary>
        </member>
        <member name="M:UniformServer.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Imported method that allo to controll console window state.
            </summary>
            <param name="hWnd"></param>
            <param name="nCmdShow"></param>
            <returns></returns>
        </member>
        <member name="M:UniformServer.NativeMethods.GetConsoleWindow">
            <summary>
            Inported method that allow acces to console window.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UniformServer.BaseServer">
            <summary>
            Class that provide base server features and envirounment static API.
            </summary>
            <summary>
            Part of class that provide methods can be started as thread for server init;
            </summary>
            <summary>
            Part of class that provide methods for establishing transmisssion via PipesProvider.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.appTerminated">
            <summary>
            If true then will stop main loop.
            </summary>
        </member>
        <member name="P:UniformServer.BaseServer.ThreadsCount">
            <summary>
            Count of threads that will started on server.
            Changing during fly permited and safely.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.threadSleepTime">
            <summary>
            How many milisseconds will sleep thread after tick.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.threadsCount">
            <summary>
            Count of threads.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.longTermServerThreads">
            <summary>
            Threads that contai servers.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.SW_HIDE">
            <summary>
            Argument that will hide console window.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.SW_SHOW">
            <summary>
            Agrument that will show console window.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.mutexObj">
            <summary>
            Object that allow to detect processes conflict.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.thread">
            <summary>
            Reference to thread that host this server.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.pipeName">
            <summary>
            Name that will be applied to the pipe.
            </summary>
        </member>
        <member name="F:UniformServer.BaseServer.securityLevel">
            <summary>
            Squrity level that will applied to pipe.
            </summary>
        </member>
        <member name="M:UniformServer.BaseServer.LoadAssemblies(System.String)">
            <summary>
            Loading assemblies from requested path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:UniformServer.BaseServer.ArgsReactor(System.String[])">
            <summary>
            Method that will configurate application and server relative to the uniform arguments.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:UniformServer.BaseServer.StartServerThread(System.String,System.Object,System.Threading.ParameterizedThreadStart)">
            <summary>
            Method that starting server thread.
            </summary>
            <param name="threadName">Name that would be applied to thread.</param>
            <param name="sharebleParam">Param that would be shared to server thread.</param>
            <param name="serverLoop">Loop delegate with sharable param.</param>
            <returns>Established thread.</returns>
        </member>
        <member name="E:UniformServer.BaseServer.ThreadTerminateRequest">
            <summary>
            Event will be called when system will request a thread termination.
            Argument - index of thread.
            </summary>
        </member>
        <member name="E:UniformServer.BaseServer.ThreadStartRequest">
            <summary>
            Event that will be called when seystem will require a thread start.
            Argument - index of thread.
            </summary>
        </member>
        <member name="M:UniformServer.BaseServer.ThreadingServerLoop_PP_Output(System.Object)">
            <summary>
             Main loop that control monitor thread.
            </summary>
        </member>
        <member name="M:UniformServer.BaseServer.ThreadingServerLoop_PP_Input(System.Object)">
            <summary>
             Main loop that control pipe chanel that will recive clients.
            </summary>
        </member>
        <member name="M:UniformServer.BaseServer.SendAnswerViaPP(System.String,UniformQueries.QueryPart[])">
            <summary>
            Open server line using PipesProvider that will send answer backward to cliend by dirrect line.
            Line will established relative to the data shared by client query.
            
            Using this method you frovide uniform revers connection and not need to create 
            a transmission line by yourself.
            
            Recommended to use this methos by default dor duplex connection between sever and clients.
            </summary>
            <param name="answer">Message that will sent by server to target client.</param>
            <param name="entryQueryParts">Parts of query that was recived from client. 
            Method will detect core part and establish backward connection.</param>
            <returns></returns>
        </member>
        <member name="T:UniformServer.Standard.BroadcastingServer">
            <summary>
            Server that allow instiniate BaseServer.
            Not contain any additive methods.
            
            Case of using - simple operations like registing of server for answer.
            </summary>
        </member>
        <member name="F:UniformServer.Standard.BroadcastingServer.GetMessage">
            <summary>
            Handler that would generate brodcasting message during every new connection.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.BroadcastingServer.#ctor">
            <summary>
            Insiniate broadcasting server.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.BroadcastingServer.StartBroadcastingViaPP(System.String,PipesProvider.Security.SecurityLevel,PipesProvider.Server.TransmissionControllers.BroadcastingServerTransmissionController.MessageHandeler,System.Int32)">
            <summary>
            Open server with broadcasting chanels using PipesProvider.
            </summary>
            <param name="pipeName">Name of the pipe.</param>
            <param name="securityLevel">Sequirity level that would be applied to connection.</param>
            <param name="getBroadcastingMessageHandler">delegate that will be called to get message for new client.</param>
            <param name="chanels">How many many connections would awaiable to this server.
            Attention: every chanel is a tread.</param>
        </member>
        <member name="M:UniformServer.Standard.BroadcastingServer.ThreadingServerLoop_PP_Broadcast(System.Object)">
            <summary>
            Main threaded loop that control broadcassting server loop start.
            </summary>
        </member>
        <member name="T:UniformServer.Standard.RelayServer">
            <summary>
            Server that provide API for relaying of transmission.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.#ctor">
            <summary>
            Instiniate relay server.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.EstablishAutoRelayServer(PipesProvider.Networking.Routing.RelayInstruction)">
            <summary>
            Auto detect behavior of instruction and start relative relay server.
            </summary>
            <param name="instruction">Instruction that contain relay params.</param>
            <returns>Established server.</returns>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.EstablishBroadcastingRelayServer(PipesProvider.Networking.Routing.RelayInstruction)">
            <summary>
            Establish server suitable provided instruction that would retranslate broadcasting from target server.
            </summary>
            <param name="instruction">Instruction that contain relay params.</param>
            <returns>Established server.</returns>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.ThreadingServerLoop_BroadcastingRelay(System.Object)">
            <summary>
            Starting the server loop that will control relay query handler.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.QueryHandler_BroadcastingRelay(PipesProvider.Server.TransmissionControllers.BroadcastingServerTransmissionController)">
            <summary>
            Redirect recived query from current server to other.
            </summary>
            <param name="controller">Controller that manage curernt transmission.</param>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.EstablishDuplexRelayServer(PipesProvider.Networking.Routing.RelayInstruction)">
            <summary>
            Establishing server that would recive client's server and forwarding it to target servers by using routing table.
            </summary>
            <param name="instruction">Instruction that contain relay params.</param>
            <returns>Established server.</returns>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.ThreadingServerLoop_DuplexRelay(System.Object)">
            <summary>
            Starting the server loop that will control relay query handler.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.RelayServer.QueryHandler_DuplexRelay(PipesProvider.Server.TransmissionControllers.BaseServerTransmissionController,System.String)">
            <summary>
            Redirect recived query from current server to other.
            </summary>
            <param name="_"></param>
            <param name="query"></param>
        </member>
        <member name="T:UniformServer.Standard.SimpleServer">
            <summary>
            Server that allow instiniate BaseServer.
            Not contain any additive methods.
            
            Case of using - simple operations like registing of server for answer.
            </summary>
        </member>
        <member name="M:UniformServer.Standard.SimpleServer.#ctor">
            <summary>
            Insnitiate patch server that can be used if you not require any additive methods and properties.
            </summary>
        </member>
    </members>
</doc>
